name: Run unit tests on uv updates

on:
  schedule:
    - cron: "42 4 * * 1"
  workflow_dispatch:
    inputs:
      manual-version:
        description: "Manually input uv version"
        required: false
        default: ""

env:
  UV_SYSTEM_PYTHON: 1
  UV_VERSION_FILE: .max-uv-version

jobs:
  check-uv-version:
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.get-current-version.outputs.current-version }}
      latest-version: ${{ steps.get-latest-release.outputs.latest-version }}
      new-version: ${{ steps.compare-versions.outputs.new-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest uv release
        id: get-latest-release
        run: |
          if [[ -n "${{ github.event.inputs.manual-version }}" ]]; then
            LATEST_VERSION="${{ github.event.inputs.manual-version }}"
          else
            LATEST_VERSION=$(curl https://api.github.com/repos/astral-sh/uv/releases/latest -s | jq .name -r)
          fi
          echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Retrieve current max supported uv version from file
        id: get-current-version
        run: |
          CURRENT_VERSION=$(cat ${{ env.UV_VERSION_FILE }})
          echo current max supported uv version is $CURRENT_VERSION
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare-versions
        run: |
            set -e
            CURRENT_VERSION="${{ steps.get-current-version.outputs.current-version }}"
            LATEST_VERSION="${{ steps.get-latest-release.outputs.latest-version }}"

            if [[ -z "$CURRENT_VERSION" || -z "$LATEST_VERSION" ]]; then
              echo "Error: When comparing versions" >&2
              echo "current-version: $CURRENT_VERSION" >&2
              echo "latest-version: $LATEST_VERSION" >&2
              exit 1
            fi

            if [[ "$CURRENT_VERSION" != "$LATEST_VERSION" ]]; then
              echo "New uv version available: $LATEST_VERSION"
              echo "new-version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
            else
              echo "uv version $LATEST_VERSION is already supported"
              echo "new-version=" >> "$GITHUB_OUTPUT"
            fi

  unit-tests:
    needs: check-uv-version
    if: needs.check-uv-version.outputs.new-version != ''
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ steps.unit-tests.outputs.test-output == 'success' }}
      tests-logs: ${{ steps.unit-tests.outputs.test-logs}}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        uv-version:
          - ${{ needs.check-uv-version.outputs.new-version }}

        python-version:
          - "3.11"
          - "3.12"
          - "3.13"

    steps:
      - uses: actions/checkout@v4

      - name: Unit Tests
        id: unit-tests
        uses: ./.github/actions/unit_tests/
        with:
          uv-version: ${{ matrix.uv-version }}
          python-version: ${{ matrix.python-version }}


  create-issue:
    needs: [check-uv-version, unit-tests]
    if: needs.unit-tests.outputs.tests-passed == 'false'
    runs-on: ubuntu-latest
    env:
      issue-title: "upgrading uv to ${{ needs.check-uv-version.outputs.new-version }} causes tests failures"

    steps:
      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.unit-tests.outputs.tests-logs }}

      - name: Create issue for failing tests
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: ${{ env.issue-title }}
          content-filepath: pytest_output.txt
          labels: bug, dependency-update
          assignees: ${{github.repository_owner}}

  create-pull-request:
    needs: [check-uv-version, unit-tests]
    if: needs.unit-tests.outputs.tests-passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install new uv version
        uses: astral-sh/setup-uv@v5
        with:
          version: "${{ needs.check-uv-version.outputs.new-version }}"
          enable-cache: true

      - name: Update pyproject.toml with new max uv version
        run: |
          uvx --from=toml-cli toml set --toml-path=pyproject.toml project.optional-dependencies.uv[1] "uv <= ${{ needs.check-uv-version.outputs.new-version }}"

      - name: Update .max-uv-version file
        run: |
          echo "${{ needs.check-uv-version.outputs.new-version }}" > ${{ env.UV_VERSION_FILE }}

      - name: Create pull request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: update max uv version to ${{ needs.check-uv-version.outputs.new-version }}"
          title: "Update max uv version to ${{ needs.check-uv-version.outputs.new-version }}"
          body: "Unit tests passed. Upgrading max supported uv version to ${{ needs.check-uv-version.outputs.new-version }}."
          labels: dependencies
          branch: update-max-uv-version-${{ needs.check-uv-version.outputs.new-version }}

      - name: Minimize uv cache
        if: always()
        run: uv cache prune --ci
